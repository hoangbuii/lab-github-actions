# name: CI Build
# on:
#   push:
#     branches:
#       - "**"

# jobs:
#   Build:
#     runs-on: ubuntu-latest

#     env:
#       DOCKER_IMAGE: flask-app:${{ github.sha }}
#       DOCKER_NETWORK: flask-net
#       DOCKER_CONTAINER_NAME: flask-app


#     steps:
#       - name: Checkout
#         uses: actions/checkout@v4
    
#       - name: Set up QEMU
#         uses: docker/setup-qemu-action@v3

#       - name: Set up Docker Buildx
#         uses: docker/setup-buildx-action@v3

#       - name: Build Docker image
#         run: |
#           docker build -t ${{ env.DOCKER_IMAGE }} .
      
#       # Run 2 image is flask-app and redis database
#       - name: Set up containerizated app
#         run: |
#           docker network create ${{ env.DOCKER_NETWORK }}
#           docker run -d --name redis -p 6379:6379 -v redis:/data --network ${{ env.DOCKER_NETWORK }} --network-alias redis redis:alpine
#           docker run -d --name ${{ env.DOCKER_CONTAINER_NAME }} -p 8080:8080 -e FLASK_APP=${{ secrets.FLASK_APP }} -e FLASK_DEBUG=${{ secrets.FLASK_DEBUG }} -e GUNICORN_BIND=${{ secrets.GUNICORN_BIND }} -e PORT=${{ secrets.PORT }} -e DATABASE_URI=${{ secrets.DATABASE_URI }} --network ${{ env.DOCKER_NETWORK }} ${{ env.DOCKER_IMAGE }}
          
#       - name: Run unit tests with PyTest
#         run: |
#           docker exec ${{ env.DOCKER_CONTAINER_NAME }} poetry run pytest --pspec --cov=service --cov-fail-under=95
      
name: Kaniko Docker Build

on:
  push:
    branches:
      - master  # Trigger build on push to main branch
  pull_request:
    branches:
      - master  # Trigger on pull requests

env:
  KANIKO_CACHE_ARGS: "--cache=true --cache-copy-layers=true --cache-ttl=24h"

jobs:
  # build:
  #   runs-on: arc-runner-set

  #   container:
  #     image: gcr.io/kaniko-project/executor:debug 
  #   permissions:
  #     contents: read # read the repository
  #     packages: write # push to GHCR, omit if not pushing to GitHub's container registry

  #   steps:
  #     - name: authen
  #       run: |
  #         AUTH=$(echo -n ${{ github.actor }}:${{ secrets.GITHUB_TOKEN }} | base64)
  #         echo "{\"auths\": {\"ghcr.io\": {\"auth\": \"${AUTH}\"}}}" > /kaniko/.docker/config.json

  #     - name: Build and push container test
  #       run: |
  #         /kaniko/executor --dockerfile="./Dockerfile" \
  #           --context="${{ github.repositoryUrl }}#${{ github.ref }}#${{ github.sha }}" \
  #           --destination=docker.io/${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:latest \
  #           --push-retry 5 
  build:
    runs-on: arc-runner-set
    container:
      image: gcr.io/kaniko-project/executor:v1.20.0-debug
    permissions:
      contents: read
      packages: write
    steps:
        
      - name: Build with kaniko
        run: |
          mkdir -p /kaniko/.docker/
          cat <<EOF > /kaniko/.docker/config.json
          {
            "auths": {
              "https://index.docker.io/v1/": {
                "auth": "$(echo -n "${{ secrets.DOCKER_USERNAME }}:${{ secrets.DOCKER_PASSWORD }}" | base64 )"
              }
            }
          }
          EOF
          
          /kaniko/executor --dockerfile="./Dockerfile" \
          --context="${{ github.repositoryUrl }}#${{ github.ref }}#${{ github.sha }}"  \
          --destination="docker.io/${{ secrets.DOCKER_USERNAME }}/flask-app:$(echo ${{ github.sha }} | head -c 7)" \
          ${{ env.KANIKO_CACHE_ARGS }} \
          --push-retry 5
      - name: Clean
        run: |
          cd $GITHUB_ACTION_PATH
          cd ..
          du -hs
          du -hs $(ls)
          cd __e
          du -hs $(ls)

        