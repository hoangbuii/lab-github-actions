name: CI Build
on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: github-runner
    # container: docker:27.2

    env:
      DOCKER_IMAGE: ${{ secrets.DOCKER_USERNAME }}/flask-app
      DOCKER_NETWORK: flask-net
      DOCKER_CONTAINER_NAME: flask-app

    
    steps:
      - name: Checkout
        uses: actions/checkout@v3
     
      - name: Login to Docker hub
        run: |
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      # Build the Docker image
      - name: Build Docker image
        run: |
          docker build -t ${{ env.DOCKER_IMAGE }} .
      
      # Run 2 image is flask-app and redis database
      - name: Set up containerizated app
        run: |
          docker network create ${{ env.DOCKER_NETWORK }}
          docker run -d --name redis -p 6379:6379 -v redis:/data --network ${{ env.DOCKER_NETWORK }} --network-alias redis redis:alpine
          docker run -d --name ${{ env.DOCKER_CONTAINER_NAME }} -p 8080:8080 -e FLASK_APP=${{ secrets.FLASK_APP }} -e FLASK_DEBUG=${{ secrets.FLASK_DEBUG }} -e GUNICORN_BIND=${{ secrets.GUNICORN_BIND }} -e PORT=${{ secrets.PORT }} -e DATABASE_URI=${{ secrets.DATABASE_URI }} --network ${{ env.DOCKER_NETWORK }} ${{ env.DOCKER_IMAGE }}

      - name: Run unit tests with PyTest
        run: |
          docker exec ${{ env.DOCKER_CONTAINER_NAME }} poetry run pytest --pspec --cov=service --cov-fail-under=95

      - name: Push to Dockerhub
        run: |
          docker push ${{ env.DOCKER_IMAGE }}


    # # Required services    
    # services:
    #   # Label used to access the service container
    #   redis:
    #     # Docker Hub image
    #     image: redis
    #     # Set health checks to wait until redis has started
    #     options: >-
    #       --health-cmd "redis-cli ping"
    #       --health-interval 10s
    #       --health-timeout 5s
    #       --health-retries 5

    # # Steps for the build
    # steps:
    #   - name: Checkout
    #     uses: actions/checkout@v3
            
    #   - name: Install dependencies
    #     run: |
    #       python -m pip install poetry
    #       poetry config virtualenvs.create false
    #       poetry lock --no-update
    #       poetry install

    #   - name: Linting
    #     run: |
    #       # stop the build if there are Python syntax errors or undefined names
    #       flake8 service tests --count --select=E9,F63,F7,F82 --show-source --statistics
    #       # test for complexity. The GitHub editor is 127 chars wide
    #       flake8 service tests --count --max-complexity=10 --max-line-length=127 --statistics
    #       # Run pylint to catch other PEP8 errors
    #       pylint service tests --max-line-length=127

    #   - name: Run unit tests with PyTest
    #     run: pytest --pspec --cov=service --cov-fail-under=95
    #     env:
    #       DATABASE_URI: "redis://redis:6379"

    #   # Create a CODECOV_TOKEN in Settings->Secrets and variables->Actions
    #   # and then uncomment the following 4 lines during hands-on lab
      
    #   # - name: Upload coverage reports to Codecov
    #   #   uses: codecov/codecov-action@v3.1.4
    #   #   with:
    #   #     token: ${{ secrets.CODECOV_TOKEN }} 
  
