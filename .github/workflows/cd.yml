name: Continous Deployment Pipeline
on:
  push:
    tags: 
      - "v*"
  workflow_dispatch:


env:
  DOCKER_IMAGE: ${{ secrets.DOCKER_USERNAME }}/flask-app


jobs:
  tag-and-push:
    runs-on: self-hosted
    steps:
      - name: Extract version from tag
        id: vars
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV

      - name: Login to Docker hub
        run: |
          echo "${{ secrets.DOCKER_PASSWORD }}" | sudo docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
      - name: tag docker image
        run: |
          sudo docker tag ${{ env.DOCKER_IMAGE }}:${{ github.sha }} ${{ env.DOCKER_IMAGE }}:${{ env.VERSION }}
      - name: Push to Dockerhub
        run: |
          sudo docker push ${{ env.DOCKER_IMAGE }}:${{ env.VERSION }}
  
  clean:
    runs-on: self-hosted
    needs: tag-and-push
    steps:
      - name:
        run: |
          sudo docker image rm ${{ env.DOCKER_IMAGE }}:${{ github.sha }}
          sudo docker image rm ${{ env.DOCKER_IMAGE }}:${{ env.VERSION }}


  # deploy-to-production:
  #   runs-on: self-hosted
  #   environment:
  #       name: staging
  #       url: http://ec2-54-254-129-220.ap-southeast-1.compute.amazonaws.com:9090
  #   steps:
  #     - name: Login to Docker hub
  #       run: |
  #         ssh ${{ secrets.PRODUCTION_USER }}@${{ secrets.PRODUCTION_IP_ADDR }} 'echo "${{ secrets.DOCKER_PASSWORD }}" | sudo docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin'
      
  #     - name: Remove old version
  #       run: |
  #         ssh ${{ secrets.PRODUCTION_USER }}@${{ secrets.PRODUCTION_IP_ADDR }} 'sudo docker rm -vf ${{ env.DOCKER_CONTAINER_NAME }}'

  #     - name: Pull images
  #       run: |
  #         ssh ${{ secrets.PRODUCTION_USER }}@${{ secrets.PRODUCTION_IP_ADDR }} 'sudo docker pull ${{ env.DOCKER_IMAGE }}'
      
  #     - name: Setup new version
  #       run: |
  #         ssh ${{ secrets.PRODUCTION_USER }}@${{ secrets.PRODUCTION_IP_ADDR }} 'sudo docker run -d --name ${{ env.DOCKER_CONTAINER_NAME }} -p 8080:8080 -e FLASK_APP=${{ secrets.FLASK_APP }} -e FLASK_DEBUG=${{ secrets.FLASK_DEBUG }} -e GUNICORN_BIND=${{ secrets.GUNICORN_BIND }} -e PORT=${{ secrets.PORT }} -e DATABASE_URI=${{ secrets.DATABASE_URI }} --network ${{ env.DOCKER_NETWORK }} ${{ env.DOCKER_IMAGE }}'
      
      


