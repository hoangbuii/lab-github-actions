name: Deploy to Production

on:
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to deploy'
        required: true
        default: 'v1.0.0'
  push:
    tags: 
      - "v*"

env:
  DOCKER_IMAGE: ${{ secrets.DOCKER_USERNAME }}/flask-app

jobs:
  Deploy:
    # You need to use the INSTALLATION_NAME from the previous step
    runs-on: arc-runner-set
    if: github.event_name == 'workflow_dispatch'
    steps:
      - name: Install kubectl
        run: |
          cd $HOME
          sudo apt-get update
          sudo apt-get install -y curl libcurl4
          sudo apt-get install -y apt-transport-https ca-certificates curl gnupg
      - name: Install kubectl
        run: |
          curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.31/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
          sudo chmod 644 /etc/apt/keyrings/kubernetes-apt-keyring.gpg
          echo 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.31/deb/ /' | sudo tee /etc/apt/sources.list.d/kubernetes.list
          sudo chmod 644 /etc/apt/sources.list.d/kubernetes.list
          sudo apt-get update
          sudo apt-get install -y kubectl
          kubectl version --client
      - name: Config kubectl
        run: |
          mkdir -p ~/.kube
          echo "${{ secrets.K8S_CONF }}" > ~/.kube/config
          export KUBECONFIG=~/.kube/config
          export PATH="/usr/bin/kubectl:$PATH"
          echo 'export PATH=$HOME/bin:$PATH' >> ~/.bashrc
          kubectl get node
      - name: Install helm
        run: |
          curl https://baltocdn.com/helm/signing.asc | gpg --dearmor | sudo tee /usr/share/keyrings/helm.gpg > /dev/null
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/helm.gpg] https://baltocdn.com/helm/stable/debian/ all main" | sudo tee /etc/apt/sources.list.d/helm-stable-debian.list
          sudo apt-get update
          sudo apt-get install helm
          helm list -A

      - name: Deploy to staging
        run: |
          helm upgrade --install flask-app ./helm-chart/flask-app --namespace flask-app --set image.app.tag=${{ github.ref_name }},expose.service.app.nodePort=30007
